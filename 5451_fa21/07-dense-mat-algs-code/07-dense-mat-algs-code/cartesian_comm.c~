#include <stdio.h>
#include <mpi.h>

#define NAME_LEN 255

int main (int argc, char *argv[]){
  MPI_Init (&argc, &argv);	// starts MPI

  // Basic info
  int npes, myrank, name_len;   
  char processor_name[NAME_LEN];
  MPI_Comm_size(MPI_COMM_WORLD, &npes); 
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank); 
  MPI_Get_processor_name(processor_name, &name_len);

  // MPI_Barrier(MPI_COMM_WORLD);
  // if(myrank == 0){
  //   printf("==================================================\n");
  //   printf("Sending / Receiving in a ring\n");
  // }
  // MPI_Barrier(MPI_COMM_WORLD);

  // Set up the Cartesian topology 
  int dim_len = 2;
  int dims[2] = {sqrt(npes), sqrt(npes)}; // # rows/cols
  int periods[2] = {1, 1};      // wrap-around rows/cols

  // Create the Cartesian topology, with rank reordering 
  MPI_Comm comm_2d;
  MPI_Cart_create(MPI_COMM_WORLD,         // original comm
                  dim_len, dims, periods, // cartesian comm props
                  1,           // re-order linear rank if beneficial
                  &comm_2d);   // new communicator with 2D coords

  // Get the rank and coordinates with respect to the new topology 
  int my2drank = -1;            // may be differ from world rank
  MPI_Comm_rank(comm_2d, &my2drank);

  int mycoords[2] = {-1, -1};   // (i,j) coords
  MPI_Cart_coords(comm_2d, my2drank, 2, mycoords);

  printf("Proc %2d (%s): my2drank %3d mycoords (%3d, %3d)\n",
         myrank,processor_name,
         my2drank,mycoords[0],mycoords[1]);
